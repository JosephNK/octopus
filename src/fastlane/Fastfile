# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# 공통 헬퍼 메서드들
def setup_app_store_api_key(options)
  # App Store Connect API 키 설정
  app_store_connect_api_key(
    key_id: options[:api_key_id],           # API Key ID (10자리)
    issuer_id: options[:api_key_issuer_id], # Issuer ID (UUID 형식)
    key_filepath: options[:api_key_path]    # .p8 파일 경로
  )
end

def extract_build_info_from_ipa(ipa_path)
  # IPA 파일에서 빌드 정보 추출하여 로그에 출력
  return unless ipa_path && File.exist?(ipa_path)
  
  UI.message "📱 Extracting build information from IPA..."
  
  begin
    # unzip 명령어를 사용해서 IPA에서 Info.plist 추출
    require 'tempfile'
    require 'fileutils'
    
    Dir.mktmpdir do |temp_dir|
      # IPA 압축 해제
      system("unzip -q '#{ipa_path}' -d '#{temp_dir}'")
      
      # Info.plist 파일 찾기
      info_plist_path = Dir.glob("#{temp_dir}/Payload/*/Info.plist").first
      
      if info_plist_path
        # plutil을 사용해서 Info.plist를 JSON으로 변환하여 읽기
        json_output = `plutil -convert json -o - '#{info_plist_path}' 2>/dev/null`
        
        if $?.success? && !json_output.empty?
          require 'json'
          info_plist = JSON.parse(json_output)
          
          version = info_plist['CFBundleShortVersionString']
          build_number = info_plist['CFBundleVersion']
          bundle_id = info_plist['CFBundleIdentifier']
          
          UI.important "🔍 Build Information:"
          UI.message "   📦 Bundle ID: #{bundle_id}"
          UI.message "   📱 App Version: #{version}"
          UI.message "   🔢 Build Number: #{build_number}"
          UI.message "   📝 Full Version: #{version} (#{build_number})"
          
          # 빌드 정보를 해시로 반환
          {
            bundle_id: bundle_id,
            version: version,
            build_number: build_number,
            full_version: "#{version} (#{build_number})"
          }
        else
          UI.message "⚠️  Could not parse Info.plist from IPA"
          nil
        end
      else
        UI.message "⚠️  Could not find Info.plist in IPA"
        nil
      end
    end
  rescue => e
    UI.message "⚠️  Could not extract build info from IPA: #{e.message}"
    nil
  end
end

def process_release_notes(options)
  # 릴리즈 노트 처리 로직
  # Available language codes
  # - ar-SA, ca, cs, da, de-DE, el, en-AU, en-CA, en-GB, en-US, es-ES, es-MX, fi, fr-CA, fr-FR, 
  # - he, hi, hr, hu, id, it, ja, ko, ms, nl-NL, no, pl, pt-BR, pt-PT, ro, ru, sk, sv, th, tr, 
  # - uk, vi, zh-Hans, zh-Hant
  # 방법 1: JSON 문자열로 전달 (예: '{"en-US":"English notes","ko":"Korean notes"}')
  # 방법 2: 콤마 구분 형식 (예: 'en-US:English notes,ko:Korean notes')
  # 방법 3: 파일 경로 (예: 'file:./release_notes.json')
  # 방법 4: 기본 문자열
  if options[:release_notes] && options[:release_notes].start_with?('file:')
    # 파일에서 읽기
    file_path = options[:release_notes].sub('file:', '')
    if File.exist?(file_path)
      file_content = File.read(file_path)
      if file_path.end_with?('.json')
        require 'json'
        JSON.parse(file_content)
      else
        file_content
      end
    else
      "Bug fixes and improvements"
    end
  elsif options[:release_notes] && options[:release_notes].start_with?('{')
    # JSON 형식으로 전달된 경우
    require 'json'
    parsed = JSON.parse(options[:release_notes])
    # \n을 실제 줄바꿈으로 변환
    parsed.transform_values { |v| v.gsub('\\n', "\n") }
  elsif options[:release_notes] && options[:release_notes].include?(':')
    # 콤마 구분 key:value 형식으로 전달된 경우
    notes_hash = {}
    options[:release_notes].split(',').each do |pair|
      key, value = pair.split(':', 2)
      if key && value
        # \n을 실제 줄바꿈으로 변환
        notes_hash[key.strip] = value.strip.gsub('\\n', "\n")
      end
    end
    notes_hash.empty? ? "Bug fixes and improvements" : notes_hash
  else
    # 기본 문자열 또는 nil인 경우
    notes = options[:release_notes] || "Bug fixes and improvements"
    notes.gsub('\\n', "\n")
  end
end

platform :ios do
  desc "Description of what the lane does"
  lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
  end

  desc "Export IPA with provisioning"
  lane :export do |options| 
    gym(
      workspace: options[:workspace], 
      scheme: options[:scheme],
      skip_build_archive: true,
      archive_path: options[:archive_path],
      export_method: "app-store",
      output_directory: options[:output_directory],
      export_options: {
      signingStyle: "manual",
        provisioningProfiles: {
          options[:bundle_id] => options[:provisioning_profile]
        }
      }
    )
  end

  # TestFlight 배포용
  desc "Deploy to TestFlight for beta testing"
  lane :beta do |options| 
    groups = if options[:groups]
             options[:groups].split(',').map(&:strip)
           else
             ["App Store Connect Users"]
           end

    upload_to_testflight(
      ipa: options[:ipa],
      api_key: setup_app_store_api_key(options),
      skip_waiting_for_build_processing: options[:skip_waiting_for_build_processing] || false,
      groups: groups,
      changelog: options[:changelog] || "Bug fixes and improvements"
    )
  end

  # App Store 배포용
  desc "Deploy to App Store with specified configuration"
  lane :release do |options|
    upload_to_app_store(
      # 업로드할 IPA 파일 경로
      ipa: options[:ipa],
      
      # App Store Connect API 키 (위에서 설정한 인증 정보)
      api_key: setup_app_store_api_key(options),
      
      # 메타데이터 업로드 설정
      # false: 앱 설명, 키워드, 카테고리 등 메타데이터도 함께 업로드
      # true: 바이너리(IPA)만 업로드, 메타데이터는 건너뛰기
      skip_metadata: options[:skip_metadata] || false,
      
      # 스크린샷 업로드 설정
      # false: 앱 스크린샷도 함께 업로드
      # true: 스크린샷 업로드 건너뛰기
      skip_screenshots: options[:skip_screenshots] || false,
      
      # 심사 제출 설정
      # false: 업로드만 하고 수동으로 나중에 심사 제출
      # true: 업로드 후 자동으로 Apple 심사에 제출 (되돌릴 수 없음!)
      submit_for_review: options[:submit_for_review] || false,
      
      # 바이너리 업로드 설정
      # false: IPA 파일을 새로 업로드 (기본값)
      # true: 바이너리 업로드 건너뛰기, 기존 업로드된 빌드 사용 (TestFlight→App Store 승격 시 사용)
      skip_binary_upload: options[:skip_binary_upload] || false,
      
      # 자동 출시 설정
      # false: 심사 승인 후 수동으로 출시 (마케팅 타이밍 조절 가능)
      # true: 심사 승인 즉시 자동으로 App Store에 출시
      automatic_release: options[:automatic_release] || false,

      # 릴리즈 노트 (What's New / 변경사항) 처리
      release_notes: process_release_notes(options),
      
      # 인앱 구매 사전 검사 설정
      # false: 인앱 구매 관련 사전 검사 생략 (일반적)
      # true: 인앱 구매 메타데이터도 사전 검사 포함
      precheck_include_in_app_purchases: options[:precheck_include_in_app_purchases] || false,
      
      # 심사 제출 시 추가 정보
      submission_information: {
        # IDFA (광고 식별자) 사용 여부
        # false: 앱이 IDFA를 사용하지 않음을 Apple에 알림
        # true: 앱이 IDFA를 사용함을 Apple에 알림 (추가 심사 필요)
        add_id_info_uses_idfa: options[:add_id_info_uses_idfa] || false
      }
    )
  end

  # 개발용 빠른 업로드
  desc "Quick upload for development"
  lane :dev_release do |options|
    # IPA 파일에서 빌드 정보 추출하여 로그에 출력
    build_info = extract_build_info_from_ipa(options[:ipa])

    upload_to_app_store(
      ipa: options[:ipa],
      api_key: setup_app_store_api_key(options),
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: false,
      skip_binary_upload: options[:skip_binary_upload] || false,
      automatic_release: false,
      release_notes: process_release_notes(options),
      precheck_include_in_app_purchases: false,
      submission_information: {
        add_id_info_uses_idfa: false
      }
    )
  end

  # 완전 자동 배포
  desc "Fully automated release with review submission"
  lane :auto_release do |options|
    # IPA 파일에서 빌드 정보 추출하여 로그에 출력
    build_info = extract_build_info_from_ipa(options[:ipa])
    
    upload_to_app_store(
      ipa: options[:ipa],
      api_key: setup_app_store_api_key(options),
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: true,
      skip_binary_upload: options[:skip_binary_upload] || false,
      automatic_release: true,
      release_notes: process_release_notes(options),
      precheck_include_in_app_purchases: false,
      submission_information: {
        add_id_info_uses_idfa: false
      }
    )
  end
end
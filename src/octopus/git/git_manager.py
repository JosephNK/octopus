import os
import re
import shutil
import subprocess
from pathlib import Path
from typing import Optional


class GitManager:
    """Git Ï†ÄÏû•ÏÜåÎ•º Í¥ÄÎ¶¨ÌïòÎäî ÌÅ¥ÎûòÏä§"""

    def __init__(self, repo_url: str, local_path: str):
        """
        GitManager Ï¥àÍ∏∞Ìôî

        Args:
            repo_url (str): Git Ï†ÄÏû•ÏÜå URL
            local_path (str): Î°úÏª¨ Ï†ÄÏû• Í≤ΩÎ°ú
        """
        self.repo_url = repo_url
        self.local_path = Path(local_path)

    @staticmethod
    def get_repo_name(url):
        match = re.search(r"/([^/]+?)(?:\.git)?/?$", url)
        return match.group(1) if match else None

    def _run_command(
        self, command: list, cwd: Optional[str] = None
    ) -> tuple[bool, str]:
        """
        Î™ÖÎ†πÏñ¥Î•º Ïã§ÌñâÌïòÍ≥† Í≤∞Í≥ºÎ•º Î∞òÌôò

        Args:
            command (list): Ïã§ÌñâÌï† Î™ÖÎ†πÏñ¥ Î¶¨Ïä§Ìä∏
            cwd (str, optional): ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨

        Returns:
            tuple[bool, str]: (ÏÑ±Í≥µ Ïó¨Î∂Ä, Ï∂úÎ†•/ÏóêÎü¨ Î©îÏãúÏßÄ)
        """
        try:
            result = subprocess.run(
                command, cwd=cwd, capture_output=True, text=True, check=True
            )
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, f"Error: {e.stderr}"
        except Exception as e:
            return False, f"Unexpected error: {str(e)}"

    def _is_git_repo(self) -> bool:
        """
        Ìï¥Îãπ Í≤ΩÎ°úÍ∞Ä Git Ï†ÄÏû•ÏÜåÏù∏ÏßÄ ÌôïÏù∏

        Returns:
            bool: Git Ï†ÄÏû•ÏÜå Ïó¨Î∂Ä
        """
        git_dir = self.local_path / ".git"
        return git_dir.exists()

    def remove_directory(self) -> bool:
        """
        Remove local directory

        Returns:
            bool: Success status
        """
        try:
            if self.local_path.exists():
                shutil.rmtree(self.local_path)
                print(f"üóëÔ∏è  Directory removed: {self.local_path}")
                return True
            else:
                print(f"‚ÑπÔ∏è  Directory does not exist: {self.local_path}")
                return True
        except Exception as e:
            print(f"‚ùå Failed to remove directory: {e}")
            return False

    def clone_repository(self) -> bool:
        """
        Clone Git repository

        Returns:
            bool: Success status
        """
        command = ["git", "clone", self.repo_url, str(self.local_path)]
        success, output = self._run_command(command)

        if success:
            print(f"üì• Repository cloned: {self.repo_url} -> {self.local_path}")
            return True
        else:
            print(f"‚ùå Clone failed: {output}")
            return False

    def pull_repository(self) -> bool:
        """
        Pull latest changes from Git repository

        Returns:
            bool: Success status
        """
        if not self._is_git_repo():
            print(f"‚ùå Not a Git repository: {self.local_path}")
            return False

        command = ["git", "pull"]
        success, output = self._run_command(command, cwd=str(self.local_path))

        if success:
            print(f"üì• Pull completed: {output.strip()}")
            return True
        else:
            print(f"‚ùå Pull failed: {output}")
            return False

    def fresh_pull(self) -> bool:
        """
        Remove existing folder and clone fresh

        Returns:
            bool: Success status
        """
        print(f"üîÑ Starting fresh pull: {self.repo_url}")

        # 1. Remove existing directory
        if not self.remove_directory():
            return False

        # 2. Clone fresh
        if not self.clone_repository():
            return False

        print("‚úÖ Fresh pull completed!")
        return True

    def sync_repository(self, force_fresh: bool = False) -> bool:
        """
        Synchronize repository (pull or fresh pull)

        Args:
            force_fresh (bool): Force fresh pull execution

        Returns:
            bool: Success status
        """
        if force_fresh:
            return self.fresh_pull()

        # If local path exists and is a Git repository, pull
        if self.local_path.exists() and self._is_git_repo():
            return self.pull_repository()
        else:
            # If doesn't exist or not a Git repository, fresh pull
            return self.fresh_pull()

    def delete_branch(
        self, branch_name: str, force: bool = False, remote: bool = False
    ) -> bool:
        """
        Delete branch

        Args:
            branch_name (str): Branch name to delete
            force (bool): Force delete (delete unmerged branches)
            remote (bool): Also delete remote branch

        Returns:
            bool: Success status
        """
        if not self._is_git_repo():
            print(f"‚ùå Not a Git repository: {self.local_path}")
            return False

        success = True

        # Check current branch
        current_success, current_branch = self._run_command(
            ["git", "branch", "--show-current"], cwd=str(self.local_path)
        )

        if current_success and current_branch.strip() == branch_name:
            print(
                f"‚ùå Cannot delete current branch ({branch_name}). Please switch to another branch first."
            )
            return False

        # Delete local branch
        delete_option = "-D" if force else "-d"
        command = ["git", "branch", delete_option, branch_name]
        local_success, output = self._run_command(command, cwd=str(self.local_path))

        if local_success:
            print(f"üóëÔ∏è  Local branch deleted: {branch_name}")
        else:
            print(f"‚ùå Local branch deletion failed: {output}")
            success = False

        # Delete remote branch
        if remote and local_success:
            remote_command = ["git", "push", "origin", "--delete", branch_name]
            remote_success, remote_output = self._run_command(
                remote_command, cwd=str(self.local_path)
            )

            if remote_success:
                print(f"üåê Remote branch deleted: origin/{branch_name}")
            else:
                print(f"‚ùå Remote branch deletion failed: {remote_output}")
                success = False

        return success

    def checkout_branch(self, branch_name: str, fresh_clone: bool = True) -> bool:
        """
        Checkout to specific branch

        Args:
            branch_name (str): Branch name to checkout
            fresh_clone (bool): True for fresh clone approach, False for local cleanup approach (default: True)

        Returns:
            bool: Success status
        """
        print(f"üöÄ Starting branch checkout: {branch_name}")

        if not fresh_clone:
            # Option 1: Local repository cleanup approach
            print("üßπ Using local repository cleanup approach...")

            # 1. Check if Git repository exists
            if not self.local_path.exists():
                print(f"‚ùå Local path does not exist: {self.local_path}")
                return False

            if not self._is_git_repo():
                print(f"‚ùå Not a Git repository: {self.local_path}")
                return False

            # 2. Check current branch
            current_success, current_branch = self._run_command(
                ["git", "branch", "--show-current"], cwd=str(self.local_path)
            )

            is_current_branch = (
                current_success and current_branch.strip() == branch_name
            )
            if is_current_branch:
                print(
                    f"‚ÑπÔ∏è  Already on branch: {branch_name}, but will update to latest..."
                )

            # 3. Reset local changes
            print("üîÑ Resetting local changes...")
            if not self.reset_hard():
                return False

            # 4. Clean untracked files
            print("üßπ Cleaning untracked files...")
            if not self.clean_untracked():
                return False

            # 5. Fetch latest changes
            print("üì• Fetching latest changes...")
            fetch_success, fetch_output = self._run_command(
                ["git", "fetch"], cwd=str(self.local_path)
            )

            if not fetch_success:
                print(f"‚ùå Fetch failed: {fetch_output}")
                return False

            # 6. Branch checkout (only if not current branch)
            if not is_current_branch:
                command = ["git", "checkout", branch_name]
                success, output = self._run_command(command, cwd=str(self.local_path))

                if not success:
                    print(f"‚ùå Branch checkout failed: {output}")
                    return False

                print(f"üåø Branch checkout completed: {branch_name}")

            # 7. Pull latest changes (always execute regardless of current branch)
            print("üì• Pulling latest changes...")
            if self.pull_repository():
                print("‚úÖ Local cleanup checkout completed!")
                return True
            else:
                print("‚ö†Ô∏è  Checkout successful but pull failed")
                return True  # Return True since checkout was successful

        else:
            # Option 2: Fresh clone approach (remove ‚Üí clone ‚Üí checkout)
            print("üóëÔ∏è  Using fresh clone approach...")

            # 1. Remove existing directory
            if not self.remove_directory():
                return False

            # 2. Clone fresh
            if not self.clone_repository():
                return False

            # 3. Checkout specific branch
            command = ["git", "checkout", branch_name]
            success, output = self._run_command(command, cwd=str(self.local_path))

            if success:
                print(f"üåø Branch checkout completed: {branch_name}")
                print("‚úÖ Fresh clone checkout completed!")
                return True
            else:
                print(f"‚ùå Branch checkout failed: {output}")
                return False

    def reset_hard(self, target: str = "HEAD") -> bool:
        """
        Execute git reset --hard (delete all local changes)

        Args:
            target (str): Reset target (default: HEAD)

        Returns:
            bool: Success status
        """
        if not self._is_git_repo():
            print(f"‚ùå Not a Git repository: {self.local_path}")
            return False

        command = ["git", "reset", "--hard", target]
        success, output = self._run_command(command, cwd=str(self.local_path))

        if success:
            print(f"üîÑ Hard reset completed: {target}")
            return True
        else:
            print(f"‚ùå Hard reset failed: {output}")
            return False

    def clean_untracked(self, force: bool = True, directories: bool = True) -> bool:
        """
        Delete untracked files and directories

        Args:
            force (bool): Force deletion
            directories (bool): Also delete directories

        Returns:
            bool: Success status
        """
        if not self._is_git_repo():
            print(f"‚ùå Not a Git repository: {self.local_path}")
            return False

        command = ["git", "clean"]
        if force:
            command.append("-f")
        if directories:
            command.append("-d")

        success, output = self._run_command(command, cwd=str(self.local_path))

        if success:
            print(f"üßπ Untracked files/directories cleaned")
            if output.strip():
                print(f"Deleted items:\n{output}")
            return True
        else:
            print(f"‚ùå Clean failed: {output}")
            return False

    def checkout_commit(self, commit_hash: str) -> bool:
        """
        Checkout specific commit

        Args:
            commit_hash (str): Commit hash

        Returns:
            bool: Success status
        """
        if not self._is_git_repo():
            print(f"‚ùå Not a Git repository: {self.local_path}")
            return False

        command = ["git", "checkout", commit_hash]
        success, output = self._run_command(command, cwd=str(self.local_path))

        if success:
            print(f"üìå Commit checkout completed: {commit_hash}")
            return True
        else:
            print(f"‚ùå Commit checkout failed: {output}")
            return False

    def get_branches(self) -> tuple[bool, list]:
        """
        Î™®Îì† Î∏åÎûúÏπò Î™©Î°ù Î∞òÌôò

        Returns:
            tuple[bool, list]: (ÏÑ±Í≥µ Ïó¨Î∂Ä, Î∏åÎûúÏπò Î™©Î°ù)
        """
        if not self._is_git_repo():
            return False, []

        # Î°úÏª¨ Î∏åÎûúÏπò
        success, local_output = self._run_command(
            ["git", "branch"], cwd=str(self.local_path)
        )

        # ÏõêÍ≤© Î∏åÎûúÏπò
        remote_success, remote_output = self._run_command(
            ["git", "branch", "-r"], cwd=str(self.local_path)
        )

        branches = {"local": [], "remote": [], "current": None}

        if success:
            for line in local_output.strip().split("\n"):
                line = line.strip()
                if line.startswith("* "):
                    branches["current"] = line[2:]  # ÌòÑÏû¨ Î∏åÎûúÏπò (*)
                    branches["local"].append(line[2:])
                elif line:
                    branches["local"].append(line)

        if remote_success:
            for line in remote_output.strip().split("\n"):
                line = line.strip()
                if line and not line.startswith("origin/HEAD"):
                    branches["remote"].append(line)

        return True, branches

    def get_status(self) -> dict:
        """
        Ï†ÄÏû•ÏÜå ÏÉÅÌÉú Ï†ïÎ≥¥ Î∞òÌôò

        Returns:
            dict: ÏÉÅÌÉú Ï†ïÎ≥¥
        """
        status = {
            "local_path_exists": self.local_path.exists(),
            "is_git_repo": False,
            "current_branch": None,
            "remote_url": None,
            "branches": None,
            "local_path": str(self.local_path),
        }

        if status["local_path_exists"]:
            status["is_git_repo"] = self._is_git_repo()

            if status["is_git_repo"]:
                # ÌòÑÏû¨ Î∏åÎûúÏπò ÌôïÏù∏
                success, branch = self._run_command(
                    ["git", "branch", "--show-current"], cwd=str(self.local_path)
                )
                if success:
                    status["current_branch"] = branch.strip()

                # ÏõêÍ≤© URL ÌôïÏù∏
                success, url = self._run_command(
                    ["git", "remote", "get-url", "origin"], cwd=str(self.local_path)
                )
                if success:
                    status["remote_url"] = url.strip()

                # Î∏åÎûúÏπò Ï†ïÎ≥¥
                branches_success, branches = self.get_branches()
                if branches_success:
                    status["branches"] = branches

        return status


# === Í∞ÑÎã®Ìïú ÏÇ¨Ïö© ÏòàÏãú ===

# 1. Ï†ÄÏû•ÏÜå ÎèôÍ∏∞Ìôî (Í∏∞Î≥∏)
# git_manager.sync_repository()

# 2. ÏôÑÏ†ÑÌûà ÏÉàÎ°ú ÌÅ¥Î°† (Ìè¥Îçî ÏÇ≠Ï†ú ÌõÑ)
# git_manager.fresh_pull()

# 3. ÌäπÏ†ï Î∏åÎûúÏπòÎ°ú Ï≤¥ÌÅ¨ÏïÑÏõÉ (Ìè¥Îçî ÏÇ≠Ï†ú ‚Üí ÌÅ¥Î°† ‚Üí Ï≤¥ÌÅ¨ÏïÑÏõÉ)
# git_manager.checkout_branch("develop")
# git_manager.checkout_branch("feature/login")

# === Í∞úÎ≥Ñ Í∏∞Îä• ÏÇ¨Ïö© ÏòàÏãú ===

# Î∏åÎûúÏπò ÏÇ≠Ï†ú
# git_manager.delete_branch("old-feature")

# ÌäπÏ†ï Ïª§Î∞ã Ï≤¥ÌÅ¨ÏïÑÏõÉ
# git_manager.checkout_commit("a1b2c3d4")

# ÏÉÅÌÉú ÌôïÏù∏
# status = git_manager.get_status()
# print(status)

# Í∞ïÏ†úÎ°ú fresh pull Ïã§Ìñâ
# git_manager.sync_repository(force_fresh=True)
